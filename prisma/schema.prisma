generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bingos        Bingo[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Bingo {
    id          String       @id @default(cuid())
    title       String
    gridSize    Int
    cells       BingoCell[]
    style       Style?
    background  Background?
    stamp       StampConfig?
    suggestions Suggestion[]
    status      String       @default("draft") // "draft" | "published"
    userId      String?
    authorToken String?
    shareToken  String?      @unique @default(cuid())
    user        User?        @relation(fields: [userId], references: [id])
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Style {
    id         String      @id @default(cuid())
    fontFamily String
    fontSize   Int
    color      String
    cellSize   Int
    gap        Int
    cellStyle  CellStyle[]
    bingo      Bingo       @relation(fields: [bingoId], references: [id])
    bingoId    String      @unique
    createdAt  DateTime    @default(now())
}

model CellStyle {
    id         String   @id @default(cuid())
    position   Int
    color      String
    fontFamily String
    fontSize   Int
    styleId    String
    style      Style    @relation(fields: [styleId], references: [id])
    createdAt  DateTime @default(now())
}

model Background {
    id        String   @id @default(cuid())
    type      String // "image" | "gradient"
    value     String // URL for images, gradient config for gradients
    bingo     Bingo    @relation(fields: [bingoId], references: [id])
    bingoId   String   @unique
    createdAt DateTime @default(now())
}

model StampConfig {
    id      String @id @default(cuid())
    type    String
    value   String
    size    Int
    opacity Float
    bingo   Bingo? @relation(fields: [bingoId], references: [id])
    bingoId String @unique
}

model BingoCell {
    id        String  @id @default(cuid())
    content   String
    position  Int
    validated Boolean @default(false)
    bingoId   String
    bingo     Bingo   @relation(fields: [bingoId], references: [id], onDelete: Cascade)
}

model Suggestion {
    id        String   @id @default(cuid())
    content   String
    bingoId   String
    status    String   @default("pending") // "pending" | "added" | "rejected"
    bingo     Bingo    @relation(fields: [bingoId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
